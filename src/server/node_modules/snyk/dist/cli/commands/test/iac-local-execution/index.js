"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = void 0;
const fs = require("fs");
const YAML = require("js-yaml");
const detect_1 = require("../../../../lib/detect");
const iac_parser_1 = require("../../../../lib/iac/iac-parser");
const util = require("util");
const policy_engine_1 = require("./policy-engine");
const results_formatter_1 = require("./results-formatter");
const readFileContentsAsync = util.promisify(fs.readFile);
const REQUIRED_K8S_FIELDS = ['apiVersion', 'kind', 'metadata'];
// this method executes the local processing engine and then formats the results to adapt with the CLI output.
// the current version is dependent on files to be present locally which are not part of the source code.
// without these files this method would fail.
// if you're interested in trying out the experimental local execution model for IaC scanning, please reach-out.
async function test(pathToScan, options) {
    // TODO: add support for proper typing of old TestResult interface.
    const results = await localProcessing(pathToScan);
    const formattedResults = results_formatter_1.formatResults(results, options);
    const singleFileFormattedResult = formattedResults[0];
    return singleFileFormattedResult;
}
exports.test = test;
async function localProcessing(pathToScan) {
    const policyEngine = await policy_engine_1.buildPolicyEngine();
    const filePathsToScan = await getFilePathsToScan(pathToScan);
    const fileDataToScan = await parseFileContentsForPolicyEngine(filePathsToScan);
    const scanResults = await policyEngine.scanFiles(fileDataToScan);
    return scanResults;
}
async function getFilePathsToScan(pathToScan) {
    if (detect_1.isLocalFolder(pathToScan)) {
        throw new Error('IaC Experimental version does not support directory scan yet.');
    }
    if (iac_parser_1.getFileType(pathToScan) === 'tf') {
        throw new Error('IaC Experimental version does not support Terraform scan yet.');
    }
    return [
        { filePath: pathToScan, fileType: iac_parser_1.getFileType(pathToScan) },
    ];
}
async function parseFileContentsForPolicyEngine(filesMetadata) {
    const parsedFileData = [];
    for (const fileMetadata of filesMetadata) {
        const fileContent = await readFileContentsAsync(fileMetadata.filePath, 'utf-8');
        const yamlDocuments = YAML.safeLoadAll(fileContent);
        yamlDocuments.forEach((parsedYamlDocument, docId) => {
            if (REQUIRED_K8S_FIELDS.every((requiredField) => parsedYamlDocument.hasOwnProperty(requiredField))) {
                parsedFileData.push(Object.assign(Object.assign({}, fileMetadata), { fileContent: fileContent, jsonContent: parsedYamlDocument, docId }));
            }
            else {
                throw new Error('Invalid K8s File!');
            }
        });
    }
    return parsedFileData;
}
//# sourceMappingURL=index.js.map