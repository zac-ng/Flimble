"use strict";
const cloneDeep = require('lodash.clonedeep');
const assign = require('lodash.assign');
const chalk_1 = require("chalk");
const snyk = require("../../../lib");
const config = require("../../../lib/config");
const is_ci_1 = require("../../../lib/is-ci");
const api_token_1 = require("../../../lib/api-token");
const Debug = require("debug");
const pathLib = require("path");
const detect_1 = require("../../../lib/detect");
const types_1 = require("../../commands/types");
const iac_test_result_1 = require("../../../lib/snyk-test/iac-test-result");
const fail_on_error_ts_1 = require("../../../lib/errors/fail-on-error.ts");
const formatters_1 = require("./formatters");
const utils = require("./utils");
const iac_output_1 = require("./iac-output");
const ecosystems_1 = require("../../../lib/ecosystems");
const is_multi_project_scan_1 = require("../../../lib/is-multi-project-scan");
const constants_1 = require("../../../lib/iac/constants");
const vuln_helpers_1 = require("./vuln-helpers");
const common_1 = require("../../../lib/snyk-test/common");
const format_test_results_1 = require("./formatters/format-test-results");
const iacLocalExecution = require("./iac-local-execution");
const debug = Debug('snyk-test');
const SEPARATOR = '\n-------------------------------------------------------\n';
const showVulnPathsMapping = {
    false: 'none',
    none: 'none',
    true: 'some',
    some: 'some',
    all: 'all',
};
// TODO: avoid using `as any` whenever it's possible
async function test(...args) {
    var _a;
    const resultOptions = [];
    const results = [];
    let options = {};
    if (typeof args[args.length - 1] === 'object') {
        options = args.pop();
    }
    // populate with default path (cwd) if no path given
    if (args.length === 0) {
        args.unshift(process.cwd());
    }
    // org fallback to config unless specified
    options.org = options.org || config.org;
    // making `show-vulnerable-paths` 'some' by default.
    const svpSupplied = (options['show-vulnerable-paths'] || '').toLowerCase();
    options.showVulnPaths = showVulnPathsMapping[svpSupplied] || 'some';
    if (options.severityThreshold &&
        !validateSeverityThreshold(options.severityThreshold)) {
        return Promise.reject(new Error('INVALID_SEVERITY_THRESHOLD'));
    }
    if (options.failOn && !validateFailOn(options.failOn)) {
        const error = new fail_on_error_ts_1.FailOnError();
        return Promise.reject(chalk_1.default.red.bold(error.message));
    }
    try {
        api_token_1.apiTokenExists();
    }
    catch (err) {
        if (options.docker && api_token_1.getDockerToken()) {
            options.testDepGraphDockerEndpoint = '/docker-jwt/test-dependencies';
            options.isDockerUser = true;
        }
        else {
            throw err;
        }
    }
    const ecosystem = ecosystems_1.getEcosystemForTest(options);
    if (ecosystem) {
        try {
            const commandResult = await ecosystems_1.testEcosystem(ecosystem, args, options);
            return commandResult;
        }
        catch (error) {
            throw new Error(error);
        }
    }
    // Promise waterfall to test all other paths sequentially
    for (const path of args) {
        // Create a copy of the options so a specific test can
        // modify them i.e. add `options.file` etc. We'll need
        // these options later.
        const testOpts = cloneDeep(options);
        testOpts.path = path;
        testOpts.projectName = testOpts['project-name'];
        let res;
        try {
            if (options.iac && options.experimental) {
                // this path is an experimental feature feature for IaC which does issue scanning locally without sending files to our Backend servers.
                // once ready for GA, it is aimed to deprecate our remote-processing model, so IaC file scanning in the CLI is done locally.
                res = await iacLocalExecution.test(path, options);
            }
            else {
                res = await snyk.test(path, testOpts);
            }
            if (testOpts.iacDirFiles) {
                options.iacDirFiles = testOpts.iacDirFiles;
            }
        }
        catch (error) {
            // Possible error cases:
            // - the test found some vulns. `error.message` is a
            // JSON-stringified
            //   test result.
            // - the flow failed, `error` is a real Error object.
            // - the flow failed, `error` is a number or string
            // describing the problem.
            //
            // To standardise this, make sure we use the best _object_ to
            // describe the error.
            if (error instanceof Error) {
                res = error;
            }
            else if (typeof error !== 'object') {
                res = new Error(error);
            }
            else {
                try {
                    res = JSON.parse(error.message);
                }
                catch (unused) {
                    res = error;
                }
            }
        }
        // Not all test results are arrays in order to be backwards compatible
        // with scripts that use a callback with test. Coerce results/errors to be arrays
        // and add the result options to each to be displayed
        const resArray = Array.isArray(res) ? res : [res];
        for (let i = 0; i < resArray.length; i++) {
            const pathWithOptionalProjectName = utils.getPathWithOptionalProjectName(path, resArray[i]);
            results.push(assign(resArray[i], { path: pathWithOptionalProjectName }));
            // currently testOpts are identical for each test result returned even if it's for multiple projects.
            // we want to return the project names, so will need to be crafty in a way that makes sense.
            if (!testOpts.projectNames) {
                resultOptions.push(testOpts);
            }
            else {
                resultOptions.push(assign(cloneDeep(testOpts), {
                    projectName: testOpts.projectNames[i],
                }));
            }
        }
    }
    const vulnerableResults = results.filter((res) => (res.vulnerabilities && res.vulnerabilities.length) ||
        (res.result &&
            res.result.cloudConfigResults &&
            res.result.cloudConfigResults.length));
    const errorResults = results.filter((res) => res instanceof Error);
    const notSuccess = errorResults.length > 0;
    const foundVulnerabilities = vulnerableResults.length > 0;
    // resultOptions is now an array of 1 or more options used for
    // the tests results is now an array of 1 or more test results
    // values depend on `options.json` value - string or object
    const errorMappedResults = !options.iac
        ? format_test_results_1.createErrorMappedResultsForJsonOutput(results)
        : results.map(iac_test_result_1.mapIacTestResult);
    // backwards compat - strip array IFF only one result
    const jsonData = errorMappedResults.length === 1
        ? errorMappedResults[0]
        : errorMappedResults;
    const { stdout: dataToSend, stringifiedData, stringifiedJsonData, stringifiedSarifData, } = format_test_results_1.extractDataToSendFromResults(results, jsonData, options);
    if (options.json || options.sarif) {
        // if all results are ok (.ok == true) then return the json
        if (errorMappedResults.every((res) => res.ok)) {
            return types_1.TestCommandResult.createJsonTestCommandResult(stringifiedData, stringifiedJsonData, stringifiedSarifData);
        }
        const err = new Error(stringifiedData);
        if (foundVulnerabilities) {
            if (options.failOn) {
                const fail = shouldFail(vulnerableResults, options.failOn);
                if (!fail) {
                    // return here to prevent failure
                    return types_1.TestCommandResult.createJsonTestCommandResult(stringifiedData, stringifiedJsonData, stringifiedSarifData);
                }
            }
            err.code = 'VULNS';
            const dataToSendNoVulns = dataToSend;
            delete dataToSendNoVulns.vulnerabilities;
            err.jsonNoVulns = dataToSendNoVulns;
        }
        err.json = stringifiedData;
        err.jsonStringifiedResults = stringifiedJsonData;
        err.sarifStringifiedResults = stringifiedSarifData;
        throw err;
    }
    const pinningSupported = results.find((res) => res.packageManager === 'pip');
    let response = results
        .map((result, i) => {
        resultOptions[i].pinningSupported = pinningSupported;
        return displayResult(results[i], resultOptions[i], result.foundProjectCount);
    })
        .join(`\n${SEPARATOR}`);
    if (notSuccess) {
        debug(`Failed to test ${errorResults.length} projects, errors:`);
        errorResults.forEach((err) => {
            const errString = err.stack ? err.stack.toString() : err.toString();
            debug('error: %s', errString);
        });
    }
    let summaryMessage = '';
    let errorResultsLength = errorResults.length;
    if (options.iac && options.iacDirFiles) {
        const iacDirFilesErrors = (_a = options.iacDirFiles) === null || _a === void 0 ? void 0 : _a.filter((iacFile) => iacFile.failureReason);
        errorResultsLength = (iacDirFilesErrors === null || iacDirFilesErrors === void 0 ? void 0 : iacDirFilesErrors.length) || errorResults.length;
        if (iacDirFilesErrors) {
            for (const iacFileError of iacDirFilesErrors) {
                response += chalk_1.default.bold.red(iac_output_1.getIacDisplayErrorFileOutput(iacFileError));
            }
        }
    }
    if (results.length > 1) {
        const projects = results.length === 1 ? 'project' : 'projects';
        summaryMessage =
            `\n\n\nTested ${results.length} ${projects}` +
                formatters_1.summariseVulnerableResults(vulnerableResults, options) +
                formatters_1.summariseErrorResults(errorResultsLength) +
                '\n';
    }
    if (notSuccess) {
        response += chalk_1.default.bold.red(summaryMessage);
        const error = new Error(response);
        // take the code of the first problem to go through error
        // translation
        // HACK as there can be different errors, and we pass only the
        // first one
        error.code = errorResults[0].code;
        error.userMessage = errorResults[0].userMessage;
        throw error;
    }
    if (foundVulnerabilities) {
        if (options.failOn) {
            const fail = shouldFail(vulnerableResults, options.failOn);
            if (!fail) {
                // return here to prevent throwing failure
                response += chalk_1.default.bold.green(summaryMessage);
                return types_1.TestCommandResult.createHumanReadableTestCommandResult(response, stringifiedJsonData, stringifiedSarifData);
            }
        }
        response += chalk_1.default.bold.red(summaryMessage);
        const error = new Error(response);
        // take the code of the first problem to go through error
        // translation
        // HACK as there can be different errors, and we pass only the
        // first one
        error.code = vulnerableResults[0].code || 'VULNS';
        error.userMessage = vulnerableResults[0].userMessage;
        error.jsonStringifiedResults = stringifiedJsonData;
        error.sarifStringifiedResults = stringifiedSarifData;
        throw error;
    }
    response += chalk_1.default.bold.green(summaryMessage);
    return types_1.TestCommandResult.createHumanReadableTestCommandResult(response, stringifiedJsonData, stringifiedSarifData);
}
function shouldFail(vulnerableResults, failOn) {
    // find reasons not to fail
    if (failOn === 'all') {
        return vuln_helpers_1.hasFixes(vulnerableResults);
    }
    if (failOn === 'upgradable') {
        return vuln_helpers_1.hasUpgrades(vulnerableResults);
    }
    if (failOn === 'patchable') {
        return vuln_helpers_1.hasPatches(vulnerableResults);
    }
    // should fail by default when there are vulnerable results
    return vulnerableResults.length > 0;
}
function validateSeverityThreshold(severityThreshold) {
    return common_1.SEVERITIES.map((s) => s.verboseName).indexOf(severityThreshold) > -1;
}
function validateFailOn(arg) {
    return Object.keys(common_1.FAIL_ON).includes(arg);
}
function displayResult(res, options, foundProjectCount) {
    const meta = formatters_1.formatTestMeta(res, options);
    const dockerAdvice = formatters_1.dockerRemediationForDisplay(res);
    const projectType = res.packageManager || options.packageManager;
    const localPackageTest = detect_1.isLocalFolder(options.path);
    let testingPath = options.path;
    if (options.iac && options.iacDirFiles && res.targetFile) {
        testingPath = pathLib.basename(res.targetFile);
    }
    const prefix = chalk_1.default.bold.white('\nTesting ' + testingPath + '...\n\n');
    // handle errors by extracting their message
    if (res instanceof Error) {
        return prefix + res.message;
    }
    const issuesText = res.licensesPolicy ||
        constants_1.TEST_SUPPORTED_IAC_PROJECTS.includes(projectType)
        ? 'issues'
        : 'vulnerabilities';
    let pathOrDepsText = '';
    if (res.dependencyCount) {
        pathOrDepsText += res.dependencyCount + ' dependencies';
    }
    else if (options.iacDirFiles && res.targetFile) {
        pathOrDepsText += pathLib.basename(res.targetFile);
    }
    else {
        pathOrDepsText += options.path;
    }
    const testedInfoText = `Tested ${pathOrDepsText} for known ${issuesText}`;
    let multiProjAdvice = '';
    const advertiseGradleSubProjectsCount = projectType === 'gradle' &&
        !options['gradle-sub-project'] &&
        !options.allProjects &&
        foundProjectCount;
    if (advertiseGradleSubProjectsCount) {
        multiProjAdvice = chalk_1.default.bold.white(`\n\nTip: This project has multiple sub-projects (${foundProjectCount}), ` +
            'use --all-sub-projects flag to scan all sub-projects.');
    }
    const advertiseAllProjectsCount = projectType !== 'gradle' &&
        !is_multi_project_scan_1.isMultiProjectScan(options) &&
        foundProjectCount;
    if (advertiseAllProjectsCount) {
        multiProjAdvice = chalk_1.default.bold.white(`\n\nTip: Detected multiple supported manifests (${foundProjectCount}), ` +
            'use --all-projects to scan all of them at once.');
    }
    // OK  => no vulns found, return
    if (res.ok && res.vulnerabilities.length === 0) {
        const vulnPathsText = options.showVulnPaths
            ? 'no vulnerable paths found.'
            : 'none were found.';
        const summaryOKText = chalk_1.default.green(`✓ ${testedInfoText}, ${vulnPathsText}`);
        const nextStepsText = localPackageTest
            ? '\n\nNext steps:' +
                '\n- Run `snyk monitor` to be notified ' +
                'about new related vulnerabilities.' +
                '\n- Run `snyk test` as part of ' +
                'your CI/test.'
            : '';
        // user tested a package@version and got 0 vulns back, but there were dev deps
        // to consider
        // to consider
        const snykPackageTestTip = !(options.docker ||
            localPackageTest ||
            options.dev)
            ? '\n\nTip: Snyk only tests production dependencies by default. You can try re-running with the `--dev` flag.'
            : '';
        const dockerCTA = format_test_results_1.dockerUserCTA(options);
        return (prefix +
            meta +
            '\n\n' +
            summaryOKText +
            multiProjAdvice +
            (is_ci_1.isCI()
                ? ''
                : dockerAdvice + nextStepsText + snykPackageTestTip + dockerCTA));
    }
    if (constants_1.TEST_SUPPORTED_IAC_PROJECTS.includes(res.packageManager)) {
        return iac_output_1.getIacDisplayedOutput(res, testedInfoText, meta, prefix);
    }
    // NOT OK => We found some vulns, let's format the vulns info
    return format_test_results_1.getDisplayedOutput(res, options, testedInfoText, localPackageTest, projectType, meta, prefix, multiProjAdvice, dockerAdvice);
}
module.exports = test;
//# sourceMappingURL=index.js.map