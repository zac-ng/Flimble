"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatResults = void 0;
const common_1 = require("../../../../lib/snyk-test/common");
// import {
//   issuesToLineNumbers,
//   CloudConfigFileTypes,
// } from '@snyk/cloud-config-parser';
const SEVERITIES = [common_1.SEVERITY.LOW, common_1.SEVERITY.MEDIUM, common_1.SEVERITY.HIGH];
function formatResults(iacLocalExecutionResults, options) {
    const iacLocalExecutionGroupedResults = groupMultiDocResults(iacLocalExecutionResults);
    return iacLocalExecutionGroupedResults.map((iacScanResult) => iacLocalFileScanToFormattedResult(iacScanResult, options.severityThreshold));
}
exports.formatResults = formatResults;
//
// function getFileTypeForLineNumber(
//   fileType: string,
// ): CloudConfigFileTypes {
//   switch (fileType) {
//     case 'yaml':
//     case 'yml':
//       return CloudConfigFileTypes.YAML;
//     case 'json':
//       return CloudConfigFileTypes.JSON;
//     default:
//       return CloudConfigFileTypes.YAML;
//   }
// }
function iacLocalFileScanToFormattedResult(iacFileScanResult, severityThreshold) {
    const formattedIssues = iacFileScanResult.violatedPolicies.map((policy) => {
        // TODO: make sure we handle this issue with annotations:
        // https://github.com/snyk/registry/pull/17277
        const cloudConfigPath = [`[DocId:${iacFileScanResult.docId}]`].concat(policy.msg.split('.'));
        const lineNumber = -1;
        // TODO: once package becomes public, restore the commented out code for having the issue-to-line-number functionality
        // try {
        //   lineNumber = issuesToLineNumbers(
        //     iacFileScanResult.fileContent,
        //     getFileTypeForLineNumber(iacFileScanResult.fileType),
        //     cloudConfigPath,
        //   );
        // } catch (err) {
        //   //
        // }
        return Object.assign(Object.assign({}, policy), { id: policy.publicId, from: [], name: policy.title, cloudConfigPath, isIgnored: false, iacDescription: {
                issue: policy.issue,
                impact: policy.impact,
                resolve: policy.resolve,
            }, severity: policy.severity, lineNumber: lineNumber });
    });
    return {
        result: {
            cloudConfigResults: filterPoliciesBySeverity(formattedIssues, severityThreshold),
        },
        isPrivate: true,
        packageManager: 'k8sconfig',
        targetFile: iacFileScanResult.filePath,
    };
}
function groupMultiDocResults(scanResults) {
    const groupedData = scanResults.reduce((memo, result) => {
        if (memo[result.filePath]) {
            memo[result.filePath].violatedPolicies = memo[result.filePath].violatedPolicies.concat(result.violatedPolicies);
        }
        else {
            memo[result.filePath] = result;
        }
        return memo;
    }, {});
    return Object.values(groupedData);
}
function filterPoliciesBySeverity(violatedPolicies, severityThreshold) {
    if (!severityThreshold || severityThreshold === common_1.SEVERITY.LOW) {
        return violatedPolicies;
    }
    const severitiesToInclude = SEVERITIES.slice(SEVERITIES.indexOf(severityThreshold));
    return violatedPolicies.filter((policy) => severitiesToInclude.includes(policy.severity));
}
//# sourceMappingURL=results-formatter.js.map