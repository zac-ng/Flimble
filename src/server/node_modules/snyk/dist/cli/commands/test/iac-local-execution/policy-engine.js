"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildPolicyEngine = void 0;
const opa_wasm_1 = require("@open-policy-agent/opa-wasm");
const fs = require("fs");
const path = require("path");
const LOCAL_POLICY_ENGINE_DIR = `.iac-data`;
const LOCAL_POLICY_ENGINE_WASM_PATH = `${LOCAL_POLICY_ENGINE_DIR}${path.sep}policy.wasm`;
const LOCAL_POLICY_ENGINE_DATA_PATH = `${LOCAL_POLICY_ENGINE_DIR}${path.sep}data.json`;
async function buildPolicyEngine() {
    const policyEngineCoreDataPath = `${process.cwd()}/${LOCAL_POLICY_ENGINE_WASM_PATH}`;
    const policyEngineMetaDataPath = `${process.cwd()}/${LOCAL_POLICY_ENGINE_DATA_PATH}`;
    try {
        const wasmFile = fs.readFileSync(policyEngineCoreDataPath);
        const policyMetaData = fs.readFileSync(policyEngineMetaDataPath);
        const policyMetadataAsJson = JSON.parse(policyMetaData.toString());
        const opaWasmInstance = await opa_wasm_1.loadPolicy(Buffer.from(wasmFile));
        opaWasmInstance.setData(policyMetadataAsJson);
        return new PolicyEngine(opaWasmInstance);
    }
    catch (err) {
        throw new Error(`Failed to build policy engine from path: ${LOCAL_POLICY_ENGINE_DIR}: \n err: ${err.message}`);
    }
}
exports.buildPolicyEngine = buildPolicyEngine;
class PolicyEngine {
    constructor(opaWasmInstance) {
        this.opaWasmInstance = opaWasmInstance;
        this.opaWasmInstance = opaWasmInstance;
    }
    evaluate(data) {
        return this.opaWasmInstance.evaluate(data)[0].result;
    }
    async scanFiles(filesToScan) {
        try {
            return filesToScan.map((iacFile) => {
                const violatedPolicies = this.evaluate(iacFile.jsonContent);
                return Object.assign(Object.assign({}, iacFile), { violatedPolicies });
            });
        }
        catch (err) {
            // TODO: to distinguish between different failure reasons
            throw new Error(`Failed to run policy engine: ${err}`);
        }
    }
}
//# sourceMappingURL=policy-engine.js.map